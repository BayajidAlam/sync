# Docker image configuration
FRONTEND_IMAGE=bayajid23/simply-done-client
BACKEND_IMAGE=bayajid23/simply-done-server

# Directory structure
FRONTEND_DIR=client
BACKEND_DIR=server
PULUMI_DIR=pulumi_IaC

# Extract configuration from Ansible inventory (auto-generated by Pulumi)
GET_ALB_DNS = $(shell grep "alb_dns:" $(PULUMI_DIR)/ansible/inventory/hosts.yml 2>/dev/null | sed 's/.*alb_dns: //' | tr -d ' "' || echo "")
GET_FRONTEND_IP = $(shell grep -A 3 "frontend1:" $(PULUMI_DIR)/ansible/inventory/hosts.yml 2>/dev/null | grep "ansible_host:" | sed 's/.*ansible_host: //' | tr -d ' "' || echo "")

.PHONY: build-all push-all auto-deploy setup-infrastructure clean debug help deploy-frontend-with-alb

.DEFAULT_GOAL := help

help:
	@echo "🚀 SimplyDone Fully Automated Deployment"
	@echo "========================================"
	@echo "  auto-deploy               : Complete hands-off deployment (recommended)"
	@echo "  deploy-frontend-with-alb  : Deploy frontend with auto ALB DNS update"
	@echo "  build-deploy              : Build images and deploy only"
	@echo "  quick-redeploy            : Redeploy frontend only"
	@echo "  debug-system              : Debug entire system status"
	@echo "  test-deployment           : Test current deployment health"
	@echo "  debug-network             : Debug network connectivity"
	@echo "  clean-all                 : Clean up everything"

# Check if infrastructure is deployed and inventory is ready
check-inventory:
	@echo "🔍 Checking infrastructure status..."
	@if [ ! -f "$(PULUMI_DIR)/ansible/inventory/hosts.yml" ]; then \
		echo "❌ Ansible inventory not found."; \
		echo "💡 Infrastructure needs to be deployed first."; \
		exit 1; \
	fi
	@ALB_DNS="$(GET_ALB_DNS)"; \
	FRONTEND_IP="$(GET_FRONTEND_IP)"; \
	if [ -z "$$ALB_DNS" ] || [ "$$ALB_DNS" = "" ]; then \
		echo "❌ ALB DNS not found in inventory."; \
		echo "💡 Run infrastructure deployment first."; \
		exit 1; \
	fi; \
	if [ -z "$$FRONTEND_IP" ] || [ "$$FRONTEND_IP" = "" ]; then \
		echo "❌ Frontend IP not found in inventory."; \
		exit 1; \
	fi; \
	echo "✅ Infrastructure ready!"; \
	echo "   🔗 ALB DNS: $$ALB_DNS"; \
	echo "   🌐 Frontend IP: $$FRONTEND_IP"

# Build environment-agnostic Docker images with better error handling
build-all:
	@echo "🔨 Building environment-agnostic Docker images..."
	@echo "📦 Building backend image..."
	@if ! docker build -t $(BACKEND_IMAGE):latest -f $(BACKEND_DIR)/Dockerfile $(BACKEND_DIR); then \
		echo "❌ Backend build failed"; \
		exit 1; \
	fi
	@echo "📦 Building frontend image..."
	@if ! docker build -t $(FRONTEND_IMAGE):latest -f $(FRONTEND_DIR)/Dockerfile $(FRONTEND_DIR); then \
		echo "❌ Frontend build failed"; \
		exit 1; \
	fi
	@echo "✅ All images built successfully!"

# Push images to Docker Hub with verification
push-all: build-all
	@echo "📤 Pushing images to Docker Hub..."
	@if ! docker push $(BACKEND_IMAGE):latest; then \
		echo "❌ Backend push failed"; \
		exit 1; \
	fi
	@if ! docker push $(FRONTEND_IMAGE):latest; then \
		echo "❌ Frontend push failed"; \
		exit 1; \
	fi
	@echo "✅ All images pushed!"

# Deploy AWS infrastructure and generate inventory
setup-infrastructure:
	@echo "🏗️ Deploying AWS infrastructure..."
	@cd $(PULUMI_DIR) && pulumi up --yes
	@echo "⏳ Waiting for instances to boot (90 seconds)..."
	@sleep 90
	@echo "📝 Generating Ansible inventory..."
	@cd $(PULUMI_DIR) && npm install js-yaml @types/js-yaml 2>/dev/null || true
	@cd $(PULUMI_DIR) && npx ts-node scripts/updateHosts.ts
	@echo "✅ Infrastructure and inventory ready!"

# Setup backend services using Ansible
setup-backend: check-inventory
	@echo "🗄️ Setting up MongoDB and backend..."
	@ansible-playbook -i $(PULUMI_DIR)/ansible/inventory/hosts.yml $(PULUMI_DIR)/ansible/provision_mongodb.yml
	@echo "⏳ Waiting for backend initialization (30 seconds)..."
	@sleep 30
	@echo "✅ Backend services ready!"

# Deploy frontend using Ansible (automatically configures ALB)
deploy-frontend: check-inventory
	@echo "🌐 Deploying frontend with auto ALB configuration..."
	@ALB_DNS="$(GET_ALB_DNS)"; \
	echo "🔗 Using ALB DNS: $$ALB_DNS (from Ansible inventory)"; \
	ansible-playbook -i $(PULUMI_DIR)/ansible/inventory/hosts.yml $(PULUMI_DIR)/ansible/site.yml
	@echo "✅ Frontend deployed successfully!"

# Auto-update frontend with current ALB DNS and deploy
deploy-frontend-with-alb: check-inventory
	@echo "🔧 Auto-updating frontend with current ALB DNS..."
	@ALB_DNS="$(GET_ALB_DNS)"; \
	echo "🔗 Current ALB DNS: $$ALB_DNS"; \
	echo "VITE_APP_BACKEND_ROOT_URL=http://$$ALB_DNS" > $(FRONTEND_DIR)/.env; \
	echo "✅ Updated $(FRONTEND_DIR)/.env with ALB DNS"; \
	echo "🔨 Building frontend with new ALB DNS..."; \
	docker build -t $(FRONTEND_IMAGE):latest -f $(FRONTEND_DIR)/Dockerfile $(FRONTEND_DIR); \
	echo "📤 Pushing updated frontend..."; \
	docker push $(FRONTEND_IMAGE):latest; \
	echo "🌐 Deploying frontend..."; \
	ansible-playbook -i $(PULUMI_DIR)/ansible/inventory/hosts.yml $(PULUMI_DIR)/ansible/site.yml; \
	echo "✅ Frontend deployed with ALB DNS: $$ALB_DNS"

# Debug network connectivity
debug-network: check-inventory
	@echo "🔍 Network Connectivity Debug"
	@echo "============================="
	@ALB_DNS="$(GET_ALB_DNS)"; \
	FRONTEND_IP="$(GET_FRONTEND_IP)"; \
	echo "ALB DNS: $$ALB_DNS"; \
	echo "Frontend IP: $$FRONTEND_IP"; \
	echo ""; \
	echo "🔗 Testing ALB direct access:"; \
	curl -v "http://$$ALB_DNS/health" 2>&1 | head -20 || echo "ALB not accessible"; \
	echo ""; \
	echo "🌐 Testing Frontend direct access:"; \
	curl -v "http://$$FRONTEND_IP/" 2>&1 | head -10 || echo "Frontend not accessible"; \
	echo ""; \
	echo "🔄 Testing Frontend API proxy:"; \
	curl -v "http://$$FRONTEND_IP/health" 2>&1 | head -20 || echo "API proxy not working"

# Complete automated deployment with ALB DNS auto-update
auto-deploy: setup-infrastructure setup-backend deploy-frontend-with-alb
	@echo ""
	@echo "🎉 DEPLOYMENT COMPLETE! 🎉"
	@echo "=========================="
	@ALB_DNS="$(GET_ALB_DNS)"; \
	FRONTEND_IP="$(GET_FRONTEND_IP)"; \
	echo "🔗 Backend ALB URL: http://$$ALB_DNS"; \
	echo "🌐 Frontend URL: http://$$FRONTEND_IP"; \
	echo "📊 Health Check: http://$$ALB_DNS/health"; \
	echo "🎯 Auto-scaling: 2-5 backend instances"; \
	echo ""; \
	echo "🧪 Testing deployment..."; \
	make test-deployment

# Build and deploy without recreating infrastructure
build-deploy: push-all setup-backend deploy-frontend-with-alb
	@echo "✅ Build and deploy complete!"

# Quick redeploy frontend only
quick-redeploy: check-inventory deploy-frontend-with-alb
	@echo "✅ Frontend redeployed successfully!"

# Enhanced debugging with container inspection
debug-system:
	@echo "🔍 System Debug Information"
	@echo "=========================="
	@echo "📁 Project files:"
	@ls -la | grep -E "(client|server|pulumi_IaC|Makefile)" || echo "Missing project files"
	@echo ""
	@echo "📝 Ansible Inventory Status:"
	@if [ -f "$(PULUMI_DIR)/ansible/inventory/hosts.yml" ]; then \
		echo "✅ Inventory file exists"; \
		echo "ALB DNS: $(GET_ALB_DNS)"; \
		echo "Frontend IP: $(GET_FRONTEND_IP)"; \
		echo ""; \
		echo "📋 Inventory preview:"; \
		head -15 $(PULUMI_DIR)/ansible/inventory/hosts.yml; \
	else \
		echo "❌ Inventory file not found"; \
		echo "💡 Run: make setup-infrastructure"; \
	fi
	@echo ""
	@echo "🐳 Docker Images:"
	@docker images | grep -E "(simply-done|bayajid)" || echo "❌ No SimplyDone images found"
	@echo ""
	@echo "🏗️ Pulumi Stack:"
	@cd $(PULUMI_DIR) && pulumi stack output 2>/dev/null || echo "❌ No Pulumi stack found"

# Test deployment health with detailed output
test-deployment: check-inventory
	@echo "🧪 Testing deployment health..."
	@ALB_DNS="$(GET_ALB_DNS)"; \
	FRONTEND_IP="$(GET_FRONTEND_IP)"; \
	echo ""; \
	echo "Testing backend health: http://$$ALB_DNS/health"; \
	if curl -f -m 10 "http://$$ALB_DNS/health" 2>/dev/null; then \
		echo "✅ Backend is healthy"; \
		curl -s "http://$$ALB_DNS/health" | head -1; \
	else \
		echo "❌ Backend health check failed"; \
	fi; \
	echo ""; \
	echo "Testing frontend: http://$$FRONTEND_IP/"; \
	if curl -f -m 10 "http://$$FRONTEND_IP/" > /dev/null 2>&1; then \
		echo "✅ Frontend is accessible"; \
	else \
		echo "❌ Frontend access failed"; \
	fi; \
	echo ""; \
	echo "Testing direct ALB from frontend:"; \
	if curl -f -m 10 "http://$$ALB_DNS/health" > /dev/null 2>&1; then \
		echo "✅ Direct ALB access is working"; \
	else \
		echo "❌ Direct ALB access failed"; \
	fi

# Clean up resources
clean-all:
	@echo "🧹 Cleaning up resources..."
	-docker rmi $(FRONTEND_IMAGE):latest $(BACKEND_IMAGE):latest 2>/dev/null || true
	-rm -f $(FRONTEND_DIR)/.env
	-rm -f $(FRONTEND_DIR)/nginx.conf
	@echo "✅ Local cleanup complete!"

# Show current configuration
show-config: check-inventory
	@echo "📋 Current Configuration"
	@echo "======================="
	@ALB_DNS="$(GET_ALB_DNS)"; \
	FRONTEND_IP="$(GET_FRONTEND_IP)"; \
	echo "Backend ALB DNS: $$ALB_DNS"; \
	echo "Frontend IP: $$FRONTEND_IP"; \
	echo "Docker Images: $(FRONTEND_IMAGE):latest, $(BACKEND_IMAGE):latest"; \
	echo "Inventory File: $(PULUMI_DIR)/ansible/inventory/hosts.yml"; \
	echo ""; \
	echo "Current .env content:"; \
	cat $(FRONTEND_DIR)/.env 2>/dev/null || echo "No .env file found"

# Emergency fix - redeploy everything quickly
emergency-redeploy: build-all push-all deploy-frontend-with-alb
	@echo "🚑 Emergency redeployment complete!"

# Update just the frontend .env without deploying
update-env-only: check-inventory
	@echo "📝 Updating frontend .env file only..."
	@ALB_DNS="$(GET_ALB_DNS)"; \
	echo "VITE_APP_BACKEND_ROOT_URL=http://$$ALB_DNS" > $(FRONTEND_DIR)/.env; \
	echo "✅ Updated $(FRONTEND_DIR)/.env with ALB DNS: $$ALB_DNS"; \
	echo ""; \
	echo "📋 Current .env content:"; \
	cat $(FRONTEND_DIR)/.env